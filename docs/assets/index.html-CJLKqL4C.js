import{_ as e,r as n,c as t,a as i,d as s,b as l,w as h,e as k,o as p}from"./app-ByVKaTga.js";const d={},r=k(`<p>本文档介绍客户端与服务器的连接、数据交互的底层思想与设计逻辑。</p><h2 id="通信机制" tabindex="-1"><a class="header-anchor" href="#通信机制"><span>通信机制</span></a></h2><p><code>FunGame-Server</code> 项目将构建两个服务器端程序：<code>FunGameServer</code> 和 <code>FunGameWebAPI</code>。</p><p><code>FunGameServer</code> 提供 <code>Socket</code> 和 <code>WebSocket</code> 的通信服务，但只允许开启其中一种，不能同时开启。</p><p><code>FunGameWebAPI</code> 提供 <code>WebSocket</code> 和 <code>RESTful API</code> 共存的服务，共享数据处理。</p><h3 id="_1-socket-websocket" tabindex="-1"><a class="header-anchor" href="#_1-socket-websocket"><span>1. Socket / WebSocket</span></a></h3><p><code>FunGame-Desktop</code> 是 FunGame 项目最初开发的桌面客户端，使用了传统的 <code>Socket</code> 进行与 <code>FunGameServer</code> 的连接。Socket 通过持久的 TCP 连接，实现了低延迟、高效的数据传输，适合实时交互的游戏逻辑。</p><ul><li><strong>适用场景</strong>：桌面客户端应用、实时回合对战、低延迟数据同步。</li><li><strong>特点</strong>：基于 TCP 的长连接，能够保持持续的连接状态，适用于对网络延迟敏感的场景。</li></ul><p>为了实现跨平台的兼容性，FunGame 引入了 <code>WebSocket</code> 通信模式。WebSocket 是一种轻量、支持双向通信的协议，适合浏览器和移动端应用。</p><ul><li><strong>FunGameServer 中的 WebSocket</strong>：适用于桌面客户端转向跨平台应用时的通信需求，保证实时数据同步。</li><li><strong>FunGameWebAPI 中的 WebSocket</strong>：与 <code>RESTful API</code> 并行存在，用于实时更新、推送数据和处理快速交互。</li></ul><p>随着游戏向多平台扩展，<code>WebSocket</code> 将作为首选维护模式。它不仅支持跨平台，还能满足实时通信的需求，尤其在 Web 浏览器和移动设备上有广泛应用。</p><h3 id="_2-restful-api" tabindex="-1"><a class="header-anchor" href="#_2-restful-api"><span>2. RESTful API</span></a></h3><p>RESTful API 是 FunGame 中处理非实时数据交互的核心机制之一。它通过标准的 HTTP 请求与服务器通信，适合需要较高可靠性但实时性要求较低的场景，如用户登录、数据查询和报告生成等。</p><ul><li><p><strong>无状态连接</strong>：与 Socket 不同，RESTful API 不维护持续连接，采用无状态的请求响应模式。每次请求都独立于之前的连接。</p></li><li><p><strong>基于 JWT 的身份认证</strong>：为了保持客户端与服务器的交互安全，RESTful API 使用 <strong>JWT（JSON Web Token）</strong> 进行身份认证。客户端通过带有有效令牌的 HTTP 请求与服务器通信，并在令牌过期前刷新，从而实现安全且持久的通信。</p></li><li><p><strong>游戏数据的共享和集成</strong>：RESTful API 提供了一些无需认证的公共接口，适合外部应用引用 FunGame 的公开数据。例如，外部应用可以通过这些接口获取游戏的排行榜、物品库存等非敏感信息。</p></li></ul><h2 id="数据传输" tabindex="-1"><a class="header-anchor" href="#数据传输"><span>数据传输</span></a></h2><h3 id="_1-socketobject-结构解析" tabindex="-1"><a class="header-anchor" href="#_1-socketobject-结构解析"><span>1. <code>SocketObject</code> 结构解析</span></a></h3><div class="language-cs line-numbers-mode" data-ext="cs" data-title="cs"><button class="copy" title="Copy code" data-copied="Copied"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">Serializable</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> readonly</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> struct</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> SocketObject</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> SocketMessageType</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> SocketType</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> get</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> }</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> SocketMessageType</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Unknown</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // 消息的类型</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> Guid</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Token</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> get</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> }</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Guid</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Empty</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // 用于标识客户端的唯一令牌</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> object</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[]</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Parameters</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> get</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> }</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [];</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // 动态参数数组，存储不同类型的参数</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Length</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Parameters</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Length</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // 返回参数的长度</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    [</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">JsonConstructor</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> SocketObject</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">SocketMessageType</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> type</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> Guid</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> token</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> params</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> object</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[]</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> args</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        SocketType</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> type</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        Token</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> token</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">args</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> !=</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> null</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &amp;&amp;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> args</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Length</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &gt;</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Parameters</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> args</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>SocketObject</code> 是一个封装了客户端和服务器之间消息结构的类，是 <code>FunGame</code> 通信的主要数据结构。它通过 JSON 序列化和反序列化的方式传输数据，并通过 <code>JsonConstructor</code> 特性指定 JSON 解析时所使用的构造函数。下面详细解释其各个字段和结构。</p><h4 id="字段说明" tabindex="-1"><a class="header-anchor" href="#字段说明"><span>字段说明：</span></a></h4><ul><li><p><strong>SocketType (SocketMessageType)</strong>：代表消息的类型，通常用于标识这是哪类操作请求，例如连接请求、数据发送等。默认值为 <code>Unknown</code>。</p></li><li><p><strong>Token (Guid)</strong>：用来标识当前连接或会话的唯一标识符，用于追踪不同客户端的操作。</p></li><li><p><strong>Parameters (object[])</strong>：一个不确定类型的参数数组，允许动态传递不同类型的数据。根据消息类型不同，参数内容可能是客户端的状态、配置、或其他信息。</p></li><li><p><strong>Length</strong>：一个只读属性，返回 <code>Parameters</code> 数组的长度。</p></li></ul><h4 id="jsonconstructor-说明" tabindex="-1"><a class="header-anchor" href="#jsonconstructor-说明"><span><code>JsonConstructor</code> 说明：</span></a></h4><ul><li><code>[JsonConstructor]</code> 特性告诉 JSON 解析器应该使用带有此特性的构造函数来反序列化 JSON 数据。当接收到 JSON 消息时，解析器会自动映射 JSON 对象的字段到相应的构造函数参数。</li></ul><h3 id="_2-json-解析过程" tabindex="-1"><a class="header-anchor" href="#_2-json-解析过程"><span>2. JSON 解析过程</span></a></h3><p>在 WebSocket 通信中，<code>SocketObject</code> 通过 JSON 格式序列化和反序列化进行传输。在客户端和服务器之间传递数据时，系统会将 <code>SocketObject</code> 转换为 JSON 字符串。具体步骤如下：</p><h4 id="发送过程" tabindex="-1"><a class="header-anchor" href="#发送过程"><span><strong>发送过程</strong>：</span></a></h4><ol><li>创建 <code>SocketObject</code> 实例，指定 <code>SocketType</code>、<code>Token</code> 和 <code>Parameters</code>。</li><li>使用 JSON 序列化工具将 <code>SocketObject</code> 转换为 JSON 格式字符串。</li><li>通过 WebSocket 将 JSON 字符串发送到另一端。</li></ol><h4 id="接收过程" tabindex="-1"><a class="header-anchor" href="#接收过程"><span><strong>接收过程</strong>：</span></a></h4><ol><li>接收到 WebSocket 传递过来的 JSON 字符串。</li><li>使用 JSON 反序列化工具将 JSON 字符串转换为 <code>SocketObject</code> 实例。</li><li>验证 <code>SocketObject</code> 的 <code>Token</code> 是否正确。（Connect 和 HeartBeat 请求不需要验证）</li><li>根据 <code>SocketObject</code> 的 <code>SocketType</code> 和 <code>Parameters</code> 执行相应的处理逻辑。</li></ol><h4 id="示例-json-格式" tabindex="-1"><a class="header-anchor" href="#示例-json-格式"><span>示例 JSON 格式：</span></a></h4><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><button class="copy" title="Copy code" data-copied="Copied"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">SocketType</span><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // 如 SocketMessageType.Connect</span></span>
<span class="line"><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">Token</span><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">00000000-0000-0000-0000-000000000000</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // 客户端的 OpenToken，需要 Connect 获取</span></span>
<span class="line"><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">Parameters</span><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    [</span></span>
<span class="line"><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">      &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">param1</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    ],</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // Connect 需要的参数 1，是一个数组</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    true</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // Connect 需要的参数 2，是一个布尔值</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  ]</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // 参数数组，包含不同类型的值</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="连接服务器" tabindex="-1"><a class="header-anchor" href="#连接服务器"><span>连接服务器</span></a></h2><div class="hint-container tip"><p class="hint-container-title">提示</p><p>此部分文档适用于 <code>Socket</code> 和 <code>WebSocket</code> 模式。</p></div><p>此部分介绍 <code>FunGameServer</code> 如何处理客户端发送的连接请求。</p><h3 id="_1-主要流程" tabindex="-1"><a class="header-anchor" href="#_1-主要流程"><span>1. <strong>主要流程</strong></span></a></h3><ol><li>服务器监听客户端请求。</li><li>客户端通过 WebSocket 发送 <code>SocketObject</code> 作为请求体。</li><li>服务器解析 <code>SocketObject</code> 中的参数，判断连接条件是否满足。</li><li>返回连接状态：成功或拒绝。</li></ol><h3 id="_2-请求体" tabindex="-1"><a class="header-anchor" href="#_2-请求体"><span>2. <strong>请求体</strong></span></a></h3><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><button class="copy" title="Copy code" data-copied="Copied"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">socketType</span><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">token</span><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">00000000-0000-0000-0000-000000000000</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">parameters</span><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    [</span></span>
<span class="line"><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">      &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">ModA</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">ModB</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    ],</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 游戏模组列表</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    true</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 是否开启开发者模式</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  ]</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>socketType</code>: 1 表示连接请求。</li><li><code>token</code>: 连接成功后，服务器会返回 <code>OpenToken</code>，在这之后客户端每次请求都要附带这个 token，本次是连接服务器，没有 token，因此需要传入 <code>Guid.Empty</code>。</li><li><code>parameters[0]</code>: 客户端所安装的游戏模组列表。</li><li><code>parameters[1]</code>: 客户端是否启用开发者模式。</li></ul><h3 id="_3-连接流程解析" tabindex="-1"><a class="header-anchor" href="#_3-连接流程解析"><span>3. <strong>连接流程解析</strong></span></a></h3><h4 id="服务端接收与处理" tabindex="-1"><a class="header-anchor" href="#服务端接收与处理"><span><strong>服务端接收与处理</strong></span></a></h4><p>服务器通过 <code>ServerWebSocket</code> 接收客户端连接请求。代码流程如下：</p><div class="language-cs line-numbers-mode" data-ext="cs" data-title="cs"><button class="copy" title="Copy code" data-copied="Copied"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">Guid</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> token</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Guid</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">NewGuid</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 服务器会在监听时，为客户端生成一个 OpenToken</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">socket</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> await</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> listener</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Accept</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">token</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 处理客户端请求</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">while</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">!</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">objs</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Any</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">o</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> o</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">SocketType</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> ==</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> SocketMessageType</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Connect</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">))</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    objs</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> objs</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Union</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">await</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> socket</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">ReceiveAsync</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">());</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>服务器首先等待客户端发送 <code>SocketObject</code>，并通过 <code>socket.ReceiveAsync()</code> 接收数据。</li><li>只有当 <code>SocketObject.SocketType</code> 为 <code>Connect</code> 时，服务器才开始处理连接。</li></ul><h4 id="连接判断逻辑" tabindex="-1"><a class="header-anchor" href="#连接判断逻辑"><span><strong>连接判断逻辑</strong></span></a></h4><div class="language-cs line-numbers-mode" data-ext="cs" data-title="cs"><button class="copy" title="Copy code" data-copied="Copied"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">isConnected</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> isDebugMode</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> await</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> ConnectController</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Connect</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    listener</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> socket</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> token</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> clientip</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> objs</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Where</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">o</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> o</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">SocketType</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> ==</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> SocketMessageType</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Connect</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>ConnectController.Connect()</code> 负责检查客户端是否满足连接条件，如客户端游戏模组与服务器的兼容性、IP 是否在黑名单中等。</li></ul><h4 id="条件判断" tabindex="-1"><a class="header-anchor" href="#条件判断"><span><strong>条件判断</strong></span></a></h4><ul><li>如果客户端的模组列表缺少服务器所需模组，则连接被拒绝。</li><li>如果客户端开启了开发者模式，服务器会记录并显示该信息。</li></ul><h3 id="_4-返回结果解析" tabindex="-1"><a class="header-anchor" href="#_4-返回结果解析"><span>4. <strong>返回结果解析</strong></span></a></h3><p>根据连接判断结果，服务器会返回相应的消息，表明连接是否成功。</p><h4 id="成功连接" tabindex="-1"><a class="header-anchor" href="#成功连接"><span><strong>成功连接</strong></span></a></h4><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><button class="copy" title="Copy code" data-copied="Copied"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">socketType</span><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">token</span><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">00000000-0000-0000-0000-000000000000</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">parameters</span><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    true</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 连接状态：成功</span></span>
<span class="line"><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">    &quot;&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 表示无错误信息</span></span>
<span class="line"><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">    &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">3fa85f64-5717-4562-b3fc-2c963f66afa6</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 客户端的 OpenToken</span></span>
<span class="line"><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">    &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">FunGame Server</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 服务器名称</span></span>
<span class="line"><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">    &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">This is a notice.</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 服务器公告或通知</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  ]</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th><strong>参数</strong></th><th><strong>类型</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>Parameters[0]</td><td><code>bool</code></td><td>指示连接结果，<code>true</code> 表示连接成功，<code>false</code> 表示失败</td></tr><tr><td>Parameters[1]</td><td><code>string</code></td><td>服务器返回的消息</td></tr><tr><td>Parameters[2]</td><td><code>Guid</code></td><td>客户端的 OpenToken，从下次请求开始，客户端都需要发送用于验证</td></tr><tr><td>Parameters[3]</td><td><code>string</code></td><td>服务器的名称，连接成功时返回</td></tr><tr><td>Parameters[4]</td><td><code>string</code></td><td>服务器的公告信息，连接成功时返回</td></tr></tbody></table><h4 id="连接拒绝" tabindex="-1"><a class="header-anchor" href="#连接拒绝"><span><strong>连接拒绝</strong></span></a></h4><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><button class="copy" title="Copy code" data-copied="Copied"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">socketType</span><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">token</span><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">00000000-0000-0000-0000-000000000000</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">parameters</span><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    false</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 连接状态：失败</span></span>
<span class="line"><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">    &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Missing required mods.</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 错误信息</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  ]</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>parameters[0]</code>: <code>false</code> 表示连接失败。</li><li><code>parameters[1]</code>: 返回具体的拒绝原因，如缺少服务器所需模组或 IP 被封禁。</li></ul><h3 id="_5-错误处理" tabindex="-1"><a class="header-anchor" href="#_5-错误处理"><span>5. <strong>错误处理</strong></span></a></h3><p>服务器在处理连接过程中可能会遇到错误，如客户端发送了无效数据或者不符合规范的请求。此时服务器会向客户端返回错误消息并关闭连接。</p><div class="language-cs line-numbers-mode" data-ext="cs" data-title="cs"><button class="copy" title="Copy code" data-copied="Copied"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">await</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> SendRefuseConnect</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">socket</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">服务器已拒绝连接。</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="客户端连接令牌" tabindex="-1"><a class="header-anchor" href="#客户端连接令牌"><span>客户端连接令牌</span></a></h2><p>在 FunGame 中，<strong>OpenToken</strong>（客户端连接令牌，简称 <code>Token</code>）在请求体中起着关键的作用，负责确保客户端与服务器之间的合法交互。具体的说明如下：</p><h3 id="_1-定义" tabindex="-1"><a class="header-anchor" href="#_1-定义"><span>1. <strong>定义</strong></span></a></h3><p>这是服务器生成并提供给客户端的唯一标识符，验证客户端的操作是否合法。每次与服务器交互时，客户端必须提供正确的 token 以获得服务器的回应。</p><div class="language-cs line-numbers-mode" data-ext="cs" data-title="cs"><button class="copy" title="Copy code" data-copied="Copied"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// ISocketMessageProcessor 接口</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Guid</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Token</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> get</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> init</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-获取方式" tabindex="-1"><a class="header-anchor" href="#_2-获取方式"><span>2. <strong>获取方式</strong></span></a></h3><ol><li><p><strong>Socket/WebSocket 模式下</strong>：</p><ul><li>客户端首次连接服务器成功后，返回的 JSON 中便包含这个 token 值，客户端要保存到对应的 <code>ISocketMessageProcessor</code> 接口对象中。</li></ul></li><li><p><strong>RESTful API 模式下</strong>：</p><ul><li>客户端通过调用 <code>/user/login/</code> 接口进行账号登录，登录成功后服务器会返回 <code>BearerToken</code> 和 <code>OpenToken</code>。</li><li>在 <strong>RESTful API</strong> 模式下，实际的验证机制通过 <strong>JWT（JSON Web Token）</strong> 实现。JWT 更加适合处理跨平台、跨设备的多端兼容性问题。而 <code>OpenToken</code> 是作兼容性保留，因为不管是什么模式，都调用相同的后台逻辑。因此，OpenToken 在 RESTful API 中，相当于第二道防线。</li></ul></li></ol>`,66);function c(o,g){const a=n("RouteLink");return p(),t("div",null,[r,i("blockquote",null,[i("p",null,[s("有关此部分返回体的详细内容，参见 "),l(a,{to:"/api/user/login/"},{default:h(()=>[s("账号管理 | 登录")]),_:1}),s("。")])])])}const u=e(d,[["render",c],["__file","index.html.vue"]]),A=JSON.parse(`{"path":"/dev/architecture/","title":"架构说明","lang":"en-US","frontmatter":{"title":"架构说明","author":"Project Redbud","createTime":"2024/09/29 18:41:20","permalink":"/dev/architecture/","prev":"/welcome/","next":"/dev/config/","head":[["script",{"id":"check-dark-mode"},";(function () {const um= localStorage.getItem('vuepress-theme-appearance') || 'auto';const sm = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;if (um === 'dark' || (um !== 'light' && sm)) {document.documentElement.classList.add('dark');}})();"],["script",{"id":"check-mac-os"},"document.documentElement.classList.toggle('mac', /Mac|iPhone|iPod|iPad/i.test(navigator.platform))"]]},"headers":[{"level":2,"title":"通信机制","slug":"通信机制","link":"#通信机制","children":[{"level":3,"title":"1. Socket / WebSocket","slug":"_1-socket-websocket","link":"#_1-socket-websocket","children":[]},{"level":3,"title":"2. RESTful API","slug":"_2-restful-api","link":"#_2-restful-api","children":[]}]},{"level":2,"title":"数据传输","slug":"数据传输","link":"#数据传输","children":[{"level":3,"title":"1. SocketObject 结构解析","slug":"_1-socketobject-结构解析","link":"#_1-socketobject-结构解析","children":[]},{"level":3,"title":"2. JSON 解析过程","slug":"_2-json-解析过程","link":"#_2-json-解析过程","children":[]}]},{"level":2,"title":"连接服务器","slug":"连接服务器","link":"#连接服务器","children":[{"level":3,"title":"1. 主要流程","slug":"_1-主要流程","link":"#_1-主要流程","children":[]},{"level":3,"title":"2. 请求体","slug":"_2-请求体","link":"#_2-请求体","children":[]},{"level":3,"title":"3. 连接流程解析","slug":"_3-连接流程解析","link":"#_3-连接流程解析","children":[]},{"level":3,"title":"4. 返回结果解析","slug":"_4-返回结果解析","link":"#_4-返回结果解析","children":[]},{"level":3,"title":"5. 错误处理","slug":"_5-错误处理","link":"#_5-错误处理","children":[]}]},{"level":2,"title":"客户端连接令牌","slug":"客户端连接令牌","link":"#客户端连接令牌","children":[{"level":3,"title":"1. 定义","slug":"_1-定义","link":"#_1-定义","children":[]},{"level":3,"title":"2. 获取方式","slug":"_2-获取方式","link":"#_2-获取方式","children":[]}]}],"readingTime":{"minutes":8.15,"words":2445},"git":{"updatedTime":1727704067000,"contributors":[{"name":"milimoe","email":"mili@wrss.org","commits":1}]},"filePathRelative":"dev/architecture/readme.md","categoryList":[{"id":"e77989","sort":10000,"name":"dev"},{"id":"b9252b","sort":10001,"name":"architecture"}]}`);export{u as comp,A as data};
